# -*- coding: utf-8 -*-
"""Hypothesis_testing.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1tVKXLKKZX0Mc3_aLj8GWazmw5qj7NdfT
"""

pip install bioinfokit

import numpy as np
from bioinfokit.analys import get_data
import math

df = get_data('t_one_samp').data
a =  df['size'].to_numpy()

mu = 5

print(a)

mean = np.mean(a)
print(mean)

std_error = np.std(a) / np.sqrt(len(a))
print(std_error)

t = abs(mean - mu)/std_error
print(t)

from scipy import stats

t_crit = stats.t.ppf(q = 0.975, df = 49)
print(t_crit)

t_crit = stats.t.ppf(q = 0.95, df=49)
print(t_crit)

p = 2*(1-stats.t.cdf(x = t, df = 49))
print(p) 

p = 1-stats.t.cdf(x = t, df = 49)
print(p)

df = get_data('t_ind_samp').data
print(df)

x1 = df.loc[df['Genotype'] == 'A', 'yield'].to_numpy()
x2 = df.loc[df['Genotype'] == 'B', 'yield'].to_numpy()

print(x1)
print(x2)

x1_bar, x2_bar = np.mean(x1), np.mean(x2)
print(x1_bar)
print(x2_bar)

n1, n2 = len(x1), len(x2)
print(n1)
print(n2)

var_x1 = np.var(x1, ddof = 1)
var_x2 = np.var(x2, ddof = 1)
print(var_x1)
print(var_x2)

pool_var = ( ((n1-1)*var_x1) + ((n2-1)*var_x2) ) / (n1+n2-2)
print(pool_var)

std_error = np.sqrt(pool_var * (1.0 / n1 + 1.0 / n2))

t = abs(x1_bar - x2_bar) / std_error

t_crit = stats.t.ppf(q = 0.975, df = 11)
print(t_crit)

t_crit = stats.t.ppf(q = 0.95, df = 11)
print(t_crit)

p = 2*(1-stats.t.cdf(x = t, df = 11))
print(p)

p = 1-stats.t.cdf(x = t, df = 11)
print(p)

print(a)
mu = 5
mean = np.mean(a)
sigma = np.var(a)
print(mean)
print(sigma)

z = (mean - mu)/(sigma/np.sqrt(len(a)))
print(z)

import matplotlib.pyplot as plt
plt.style.use('seaborn')
plt.fill_between(x=np.arange(-4,0.38,0.01),
                 y1= stats.norm.pdf(np.arange(-4,0.38,0.01)) ,
                 facecolor='red',
                 alpha=0.35,
                 label= 'Area below z-statistic'
                 )

plt.fill_between(x=np.arange(0.38,4,0.01), 
                 y1= stats.norm.pdf(np.arange(0.38,4,0.01)) ,
                 facecolor='blue',
                 alpha=0.35, 
                 label= 'Area above z-statistic')
plt.legend()
plt.title ('z-statistic = 0.38')

stats.norm.cdf(z)

pval = 1 - stats.norm.cdf(z)
print(pval)

print(x1)
print(x2)
print(x1_bar)
print(x2_bar)
print(var_x1)
print(var_x2)

num = x1_bar - x2_bar
denum = np.sqrt(var_x1 * var_x1 / len(x1) + var_x2 * var_x2 / len(x2))
z = abs(num/denum)
print(z)

import matplotlib.pyplot as plt
plt.style.use('seaborn')
plt.fill_between(x=np.arange(-4,1.63,0.01),
                 y1= stats.norm.pdf(np.arange(-4,1.63,0.01)) ,
                 facecolor='red',
                 alpha=0.35,
                 label= 'Area below z-statistic'
                 )

plt.fill_between(x=np.arange(1.63,4,0.01), 
                 y1= stats.norm.pdf(np.arange(1.63,4,0.01)) ,
                 facecolor='blue',
                 alpha=0.35, 
                 label= 'Area above z-statistic')
plt.legend()
plt.title ('z-statistic = 1.63')

stats.norm.cdf(z)

pval = 1 - stats.norm.cdf(z)
print(pval)

import pandas as pd

np.random.seed(10)

type_bottle = np.random.choice(a= ["paper","cans","glass","others","plastic"],
                              p = [0.05, 0.15 ,0.25, 0.05, 0.5],
                              size=1000)
month = np.random.choice(a= ["January","February","March"],
                              p = [0.4, 0.2, 0.4],
                              size=1000)
bottles = pd.DataFrame({"types":type_bottle, 
                       "months":month})

bottles_tab = pd.crosstab(bottles.types, bottles.months, margins = True)
 
bottles_tab.columns = ["January","February","March","row_totals"]
 
bottles_tab.index = ["paper","cans","glass","others","plastic","col_totals"]

observed = bottles_tab.iloc[0:5,0:3] 
print(observed)

expected =  np.outer(bottles_tab["row_totals"][0:5],
                     bottles_tab.loc["col_totals"][0:3]) / 1000

print(expected)

expected = pd.DataFrame(expected)
 
expected.columns = ["Janurary","Feburary","March"]
expected.index = ["paper","cans","glass","others","plastic"]

print(expected)

chi_squared_stat = (((observed-expected)**2)/expected).sum().sum()
print(chi_squared_stat)

from scipy.stats import chi2

critical_value= chi2.ppf(q = 0.95, df = 8)   
print("Critical value:",critical_value)
 
p_value = 1 - chi2.cdf(x = chi_squared_stat,  df=8)
print("P value:",p_value)

