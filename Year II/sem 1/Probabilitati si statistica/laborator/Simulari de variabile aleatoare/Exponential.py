# -*- coding: utf-8 -*-
"""Exponential.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1A4ObiRwUALhEeXKugaB_siLNeyQNlNru
"""

import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from matplotlib.pyplot import figure
from scipy.stats import expon
from math import e
import math

def count_in_interval(arr, left_lim, right_lim):
      ctr = 0
      for x in arr:
        if x >= left_lim and x <= right_lim:
          ctr += 1
      return ctr

def count_smaller(arr, left_lim):
      ctr = 0
      for x in arr:
        if x <= left_lim:
          ctr += 1
      return ctr

def Exponential(l, N):

    uniform_array = []
    for i in range(N):
        uniform_array.append(np.random.uniform(0, 1))
    
    logs = np.log(uniform_array)
    exp_simulated = [log * (-1) for log in logs] 


    return exp_simulated

def see_pdf(l, simulated_values, bins_number):

    x_bins = np.linspace(0, 10, bins_number) 

    actual_pdf = []
    for i in range(len(x_bins) - 1):
        actual_pdf.append(math.pow(e, (-1) * l * x_bins[i]) - math.pow(e, (-1)* l * x_bins[i+1]))

    distribution = []
    for i in range(len(x_bins) - 1):
        ctr = count_in_interval(simulated_values, x_bins[i], x_bins[i + 1])
        distribution.append(ctr / len(simulated_values))
    
    fig, ax = plt.subplots(1, 1)
    ax.scatter(x_bins[:-1], actual_pdf, color = 'pink', label = 'built-in pdf', alpha=1)
    ax.scatter(x_bins[:-1], distribution, color = 'cyan', label = 'simulated pdf', alpha=0.5)

def see_cdf(l, simulated_values, bins_number):
    x_bins = np.linspace(0, 10, bins_number) 

    actual_cdf = []
    for i in range(len(x_bins) - 1): 
        actual_cdf.append(1 - math.pow(e, (-1)* l * x_bins[i]))

  
    distribution = []
    for i in range(len(x_bins) - 1):
        ctr = count_smaller(simulated_values, x_bins[i])
        distribution.append(ctr / len(simulated_values))

    
    fig, ax = plt.subplots(1, 1)
    ax.scatter(x_bins[:-1], actual_cdf, color = 'pink', label = 'built-in pdf', alpha=1)
    ax.scatter(x_bins[:-1], distribution, color = 'cyan', label = 'simulated pdf', alpha=0.3)

def main():
    l = 1
    N = 10000
    bins_number = 100
    simulated_values = Exponential(l, N)
    see_pdf(l, simulated_values, bins_number)
    see_cdf(l, simulated_values, bins_number)

if __name__ == "__main__":
    main()